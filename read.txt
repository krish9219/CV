# Flask Application Code with HTML template embedded in the response
# File: app.py

from flask import Flask, request, render_template_string, jsonify, g
import sqlite3

app = Flask(__name__)
DATABASE = 'process.db'

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    db.row_factory = sqlite3.Row
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

@app.route('/')
def index():
    db = get_db()
    cur = db.execute('SELECT DISTINCT owner FROM process')
    employees = [row['owner'] for row in cur.fetchall()]
    cur = db.execute('SELECT rowid, * FROM process')
    processes = cur.fetchall()
    return render_template_string(template, employees=employees, processes=processes)

@app.route('/submit', methods=['POST'])
def submit():
    data = request.get_json()
    db = get_db()
    if data.get('id'):
        db.execute('UPDATE process SET owner = ?, name = ?, link = ? WHERE rowid = ?',
                   (data['owner'], data['name'], data['link'], data['id']))
    else:
        db.execute('INSERT INTO process (owner, name, link) VALUES (?, ?, ?)',
                   (data['owner'], data['name'], data['link']))
    db.commit()
    return jsonify({'success': True})

@app.route('/filter', methods=['GET'])
def filter_data():
    owner = request.args.get('owner')
    db = get_db()
    cur = db.execute('SELECT rowid, * FROM process WHERE owner = ?', (owner,))
    processes = [dict(row) for row in cur.fetchall()]
    return jsonify(processes)

template = '''
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DM Process KTs</title>
  <style>
    body { background-color: #fff9cc; font-family: Arial, sans-serif; margin: 0; padding: 20px; }
    h1 { text-align: center; color: #333; }
    .top-bar { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
    .card-container { display: flex; flex-wrap: wrap; gap: 20px; justify-content: center; }
    .card {
      background: rgba(255, 255, 255, 0.2); border-radius: 15px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      padding: 20px; width: 200px; text-align: center;
      backdrop-filter: blur(10px); transition: transform 0.2s; position: relative;
    }
    .card:hover { animation: shake 0.5s; animation-iteration-count: 1; }
    @keyframes shake {
      0% { transform: translate(1px, 1px) rotate(0deg); }
      20% { transform: translate(-2px, -2px) rotate(-1deg); }
      40% { transform: translate(2px, 2px) rotate(1deg); }
      60% { transform: translate(-1px, -1px) rotate(0deg); }
      80% { transform: translate(1px, 1px) rotate(1deg); }
      100% { transform: translate(0px, 0px) rotate(0deg); }
    }
    .btn, .create-btn { background-color: #ffcc00; border: none; border-radius: 10px; padding: 10px 20px; cursor: pointer; }
    .edit-btn { position: absolute; top: 5px; right: 5px; font-size: 12px; padding: 5px; background: #007bff; color: #fff; border-radius: 6px; }
    .toast { position: fixed; bottom: 10px; right: 10px; background: green; color: #fff; padding: 10px 20px; border-radius: 8px; display: none; }
  </style>
</head>
<body>
  <h1>DM Process KTs</h1>
  <div class="top-bar">
    <div>
      <label>Filter by Employee:</label>
      <select id="employeeFilter" onchange="filterByEmployee()">
        <option value="">All</option>
        {% for emp in employees %}
          <option value="{{ emp }}">{{ emp }}</option>
        {% endfor %}
      </select>
    </div>
    <button class="create-btn" onclick="openForm()">Create New Card</button>
  </div>
  <div id="cardContainer" class="card-container">
    {% for row in processes %}
      <div class="card" data-id="{{ row.rowid }}" data-owner="{{ row.owner }}">
        <button class="edit-btn" onclick="editCard(this)">Edit</button>
        <h3>{{ row.name }}</h3>
        <button class="btn" onclick="showVideo('{{ row.link }}')">Click Here</button>
      </div>
    {% endfor %}
  </div>

  <dialog id="formDialog">
    <form onsubmit="return saveCard()">
      <input type="hidden" id="rowId">
      <label>Process Owner:</label>
      <input type="text" id="owner" required>
      <label>Name of the process:</label>
      <input type="text" id="name" required>
      <label>Video Link:</label>
      <input type="url" id="link" required>
      <button type="submit" class="btn">Submit</button>
      <button type="button" onclick="closeForm()">Cancel</button>
    </form>
  </dialog>

  <div id="toast" class="toast">Update Successful</div>

  <script>
    function openForm() {
      document.getElementById('rowId').value = '';
      document.getElementById('owner').value = '';
      document.getElementById('name').value = '';
      document.getElementById('link').value = '';
      document.getElementById('formDialog').showModal();
    }

    function editCard(btn) {
      const card = btn.closest('.card');
      document.getElementById('rowId').value = card.dataset.id;
      document.getElementById('owner').value = card.dataset.owner;
      document.getElementById('name').value = card.querySelector('h3').innerText;
      document.getElementById('link').value = card.querySelector('button.btn').getAttribute('onclick').match(/'(.*?)'/)[1];
      document.getElementById('formDialog').showModal();
    }

    function saveCard() {
      const payload = {
        id: document.getElementById('rowId').value,
        owner: document.getElementById('owner').value,
        name: document.getElementById('name').value,
        link: document.getElementById('link').value
      };

      fetch('/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      }).then(res => res.json()).then(data => {
        if (data.success) {
          showToast('Update Successful');
          window.location.reload();
        }
      });
      return false;
    }

    function closeForm() {
      document.getElementById('formDialog').close();
    }

    function showVideo(link) {
      window.open(link, '_blank');
    }

    function showToast(message) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.style.display = 'block';
      setTimeout(() => toast.style.display = 'none', 3000);
    }

    function filterByEmployee() {
      const emp = document.getElementById('employeeFilter').value;
      fetch(`/filter?owner=${emp}`)
        .then(res => res.json())
        .then(data => {
          const container = document.getElementById('cardContainer');
          container.innerHTML = '';
          data.forEach(row => {
            container.innerHTML += `
              <div class="card" data-id="${row.rowid}" data-owner="${row.owner}">
                <button class="edit-btn" onclick="editCard(this)">Edit</button>
                <h3>${row.name}</h3>
                <button class="btn" onclick="showVideo('${row.link}')">Click Here</button>
              </div>`;
          });
        });
    }
  </script>
</body>
</html>
'''

if __name__ == '__main__':
    with sqlite3.connect(DATABASE) as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS process (
                            owner TEXT NOT NULL,
                            name TEXT NOT NULL,
                            link TEXT NOT NULL
                        )''')
    app.run(debug=True)

import sqlite3

# Connect to the SQLite database (or create it if it doesn't exist)
conn = sqlite3.connect('process.db')
cursor = conn.cursor()

# Create the table if it doesn't already exist
cursor.execute('''
    CREATE TABLE IF NOT EXISTS process (
        owner TEXT NOT NULL,
        name TEXT NOT NULL,
        link TEXT NOT NULL
    )
''')

# Dummy data to insert
dummy_data = [
    ('Alice', 'Data Collection', 'https://sharepoint.example.com/video/data-collection'),
    ('Alice', 'Data Validation', 'https://sharepoint.example.com/video/data-validation'),
    ('Bob', 'Data Cleaning', 'https://sharepoint.example.com/video/data-cleaning'),
    ('Bob', 'Transformation Rules', 'https://sharepoint.example.com/video/transformation-rules'),
    ('Charlie', 'DM Framework Overview', 'https://sharepoint.example.com/video/dm-framework'),
    ('Charlie', 'Data Pipeline Monitoring', 'https://sharepoint.example.com/video/data-monitoring'),
    ('Dana', 'Exception Handling', 'https://sharepoint.example.com/video/exception-handling'),
    ('Dana', 'Dashboard Reports', 'https://sharepoint.example.com/video/dashboard-reports'),
    ('Eli', 'Client Sync Process', 'https://sharepoint.example.com/video/client-sync'),
    ('Eli', 'End-to-End DM Flow', 'https://sharepoint.example.com/video/dm-e2e-flow')
]

# Insert the dummy data
cursor.executemany('INSERT INTO process (owner, name, link) VALUES (?, ?, ?)', dummy_data)

# Commit changes and close the connection
conn.commit()
conn.close()

print("Dummy data inserted successfully.")
