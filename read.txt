# Import required modules
from flask import Flask, render_template_string, jsonify, request
import sqlite3
from datetime import datetime
import json

# Initialize Flask application
app = Flask(__name__)

# Function to initialize SQLite database
def init_db():
    # Connect to SQLite database (creates 'processes.db' if it doesn't exist)
    with sqlite3.connect('processes.db') as conn:
        c = conn.cursor()
        # Create 'process' table if it doesn't exist
        # Columns: id (auto-incrementing primary key), owner, name, link (iframe HTML), status, last_updated (datetime)
        c.execute('''
            CREATE TABLE IF NOT EXISTS process (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                owner TEXT NOT NULL,
                name TEXT NOT NULL,
                link TEXT NOT NULL,
                status TEXT NOT NULL,
                last_updated DATETIME NOT NULL
            )
        ''')
        # Check if table is empty
        c.execute('SELECT COUNT(*) FROM process')
        if c.fetchone()[0] == 0:
            # Insert 10 dummy processes for testing
            # Each process has owner, name, iframe link, status, and last_updated
            dummy_data = [
                ("Alice", "Process A", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "active", "2025-06-24 10:00:00"),
                ("Bob", "Process B", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "active", "2025-06-24 11:00:00"),
                ("Alice", "Process C", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "archived", "2025-06-24 12:00:00"),
                ("Charlie", "Process D", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "active", "2025-06-24 13:00:00"),
                ("Bob", "Process E", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "active", "2025-06-24 14:00:00"),
                ("Alice", "Process F", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "archived", "2025-06-24 15:00:00"),
                ("Charlie", "Process G", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "active", "2025-06-24 16:00:00"),
                ("Bob", "Process H", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "active", "2025-06-24 17:00:00"),
                ("Alice", "Process I", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "active", "2025-06-24 18:00:00"),
                ("Charlie", "Process J", '<iframe width="600" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" frameborder="0" allowfullscreen></iframe>', "archived", "2025-06-24 19:00:00"),
            ]
            # Insert dummy data into table
            c.executemany('INSERT INTO process (owner, name, link, status, last_updated) VALUES (?, ?, ?, ?, ?)', dummy_data)
        # Commit changes to database
        conn.commit()

# Helper function to convert database rows to list of dictionaries
def rows_to_dicts(rows):
    # Map each row to a dictionary with keys matching column names
    # This makes it easier to work with JSON in the frontend
    return [
        {"id": row[0], "owner": row[1], "name": row[2], "link": row[3], "status": row[4], "last_updated": row[5]}
        for row in rows
    ]

# Route for main page
@app.route('/')
def index():
    # Connect to database to fetch unique owners for filter dropdown
    with sqlite3.connect('processes.db') as conn:
        c = conn.cursor()
        c.execute('SELECT DISTINCT owner FROM process')
        # Extract owner names into a list
        owners = [row[0] for row in c.fetchall()]
    # Render HTML template, passing owners for dropdown
    return render_template_string(template, owners=owners)

# Route to fetch process data (filtered or all)
@app.route('/data', methods=['GET'])
def get_data():
    # Get optional query parameters for filtering
    owner = request.args.get('owner')
    status = request.args.get('status')
    # Base SQL query to select all processes
    query = 'SELECT * FROM process WHERE 1=1'
    params = []
    # Add owner filter if provided
    if owner:
        query += ' AND owner = ?'
        params.append(owner)
    # Add status filter if provided
    if status:
        query += ' AND status = ?'
        params.append(status)
    # Connect to database and execute query
    with sqlite3.connect('processes.db') as conn:
        c = conn.cursor()
        c.execute(query, params)
        rows = c.fetchall()
    # Convert rows to JSON-compatible format and return
    return jsonify(rows_to_dicts(rows))

# Route to add or update a process
@app.route('/submit', methods=['POST'])
def submit():
    # Parse JSON data from request
    data = request.get_json()
    process_id = data.get('id')
    owner = data.get('owner')
    name = data.get('name')
    link = data.get('link')
    # Default status to 'active' if not provided
    status = data.get('status', 'active')
    # Get current timestamp for last_updated
    last_updated = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # Connect to database
    with sqlite3.connect('processes.db') as conn:
        c = conn.cursor()
        if process_id:
            # Update existing process if ID is provided
            c.execute('''
                UPDATE process SET owner = ?, name = ?, link = ?, status = ?, last_updated = ?
                WHERE id = ?
            ''', (owner, name, link, status, last_updated, process_id))
            message = f"Process {process_id} updated"
        else:
            # Insert new process if no ID
            c.execute('''
                INSERT INTO process (owner, name, link, status, last_updated)
                VALUES (?, ?, ?, ?, ?)
            ''', (owner, name, link, status, last_updated))
            process_id = c.lastrowid
            message = "Process created"
        # Commit changes
        conn.commit()
    # Return success message and process ID
    return jsonify({"message": message, "id": process_id})

# Route to archive a process
@app.route('/archive/<int:id>', methods=['POST'])
def archive(id):
    # Get current timestamp for last_updated
    last_updated = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    # Connect to database
    with sqlite3.connect('processes.db') as conn:
        c = conn.cursor()
        # Update process status to 'archived'
        c.execute('UPDATE process SET status = ?, last_updated = ? WHERE id = ?', ('archived', last_updated, id))
        # Commit changes
        conn.commit()
    # Return success message
    return jsonify({"message": f"Process {id} archived"})

# HTML template with embedded CSS and JavaScript
template = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Set character encoding and responsive viewport -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Page title -->
    <title>DM Process KTs</title>
    <!-- Include jQuery for DOM manipulation and AJAX -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        /* Reset default styles for consistent rendering */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        /* Center content with light gray background */
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            padding: 20px;
        }
        /* Main container with light yellow background, suitable for 14" laptops */
        .container {
            max-width: 1200px;
            width: 100%;
            background: #fff9e6;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        /* Header with title and filters */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        /* Filter dropdowns and button container */
        .filters {
            display: flex;
            gap: 10px;
        }
        /* Style for dropdowns and buttons */
        select, button {
            padding: 8px;
            border-radius: 6px;
            border: 1px solid #ccc;
            cursor: pointer;
            background: #fff;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        /* 3D hover effect for buttons */
        button:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            transform: translateY(-2px);
        }
        /* Push animation on button click */
        button:active {
            animation: push 0.2s;
        }
        @keyframes push {
            0% { transform: scale(1); }
            50% { transform: scale(0.95); }
            100% { transform: scale(1); }
        }
        /* 3x2 grid for cards */
        .grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, auto);
            gap: 20px;
        }
        /* Card styling with 3D effect */
        .card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            background: #fff;
            position: relative;
            display: flex;
            flex-direction: column;
            gap: 10px;
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        /* Card hover effect */
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }
        /* Card header for process name */
        .card-header {
            font-size: 1.2em;
            font-weight: bold;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }
        /* Metadata section (owner, last updated) */
        .card-meta {
            display: flex;
            flex-direction: column;
            gap: 5px;
            font-size: 0.9em;
        }
        /* Container for status text and indicator */
        .status-container {
            position: absolute;
            top: 10px;
            right: 30px;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        /* Status text styling */
        .status-text {
            font-size: 0.8em;
            color: #555;
        }
        /* Status indicator (circle) */
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }
        /* Green pulsing effect for active status */
        .status-active {
            background: green;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(0,255,0,0.4); }
            70% { box-shadow: 0 0 0 10px rgba(0,255,0,0); }
            100% { box-shadow: 0 0 0 0 rgba(0,255,0,0); }
        }
        /* Action buttons (Edit, Archive) */
        .card-actions {
            display: flex;
            gap: 20px;
            margin-top: 10px;
        }
        /* Video button styling */
        .video-btn {
            text-align: center;
            background: #007bff;
            color: white;
            padding: 8px;
            border-radius: 6px;
            text-decoration: none;
            display: block;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }
        /* Video button hover effect */
        .video-btn:hover {
            box-shadow: 0 6px 12px rgba(0,0,0,0.2);
            transform: translateY(-2px);
        }
        /* Video button push animation */
        .video-btn:active {
            animation: push 0.2s;
        }
        /* Pagination buttons */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }
        .pagination button {
            padding: 8px 16px;
        }
        /* Modal overlay for form and video */
        .modal, .video-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
        }
        /* Modal content styling */
        .modal-content, .video-content {
            background: white;
            padding: 20px;
            border-radius: 8px;
            max-width: 500px;
            width: 90%;
            position: relative;
            box-shadow: 0 6px 12px rgba(0,0,0,0.2);
        }
        /* Video modal content (wider for iframe) */
        .video-content {
            max-width: 650px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        /* Form styling in modal */
        .modal-content form {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        /* Form input fields */
        .modal-content input, .modal-content select, .modal-content textarea {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        /* Textarea for iframe HTML */
        .modal-content textarea {
            height: 100px;
        }
        /* Close button for modals */
        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            cursor: pointer;
        }
        /* Toast notification styling */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #333;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            display: none;
        }
    </style>
</head>
<body>
    <!-- Main container -->
    <div class="container">
        <!-- Header with title and filters -->
        <div class="header">
            <h1>DM Process KTs</h1>
            <div class="filters">
                <!-- Owner filter dropdown -->
                <select id="owner-filter">
                    <option value="">All Owners</option>
                    {% for owner in owners %}
                    <option value="{{ owner }}">{{ owner }}</option>
                    {% endfor %}
                </select>
                <!-- Status filter dropdown -->
                <select id="status-filter">
                    <option value="">All Statuses</option>
                    <option value="active">Active</option>
                    <option value="archived">Archived</option>
                </select>
                <!-- Button to open add process modal -->
                <button id="add-process">Add Process</button>
            </div>
        </div>
        <!-- Grid for process cards -->
        <div class="grid" id="process-grid"></div>
        <!-- Pagination controls -->
        <div class="pagination" id="pagination"></div>
    </div>

    <!-- Form modal for adding/editing processes -->
    <div class="modal" id="form-modal">
        <div class="modal-content">
            <span class="close-btn">×</span>
            <h2 id="modal-title">Add Process</h2>
            <form id="process-form">
                <!-- Hidden field for process ID (used in edit) -->
                <input type="hidden" id="process-id">
                <label>Owner</label>
                <input type="text" id="owner" required>
                <label>Process Name</label>
                <input type="text" id="name" required>
                <label>Video Embed (iframe HTML)</label>
                <textarea id="link" required></textarea>
                <!-- Status field, hidden for add -->
                <label style="display: none;">Status</label>
                <select id="status" style="display: none;" required>
                    <option value="active" selected>Active</option>
                    <option value="archived">Archived</option>
                </select>
                <button type="submit">Submit</button>
                <button type="button" id="cancel-btn">Cancel</button>
            </form>
        </div>
    </div>

    <!-- Video modal for displaying iframe -->
    <div class="video-modal" id="video-modal">
        <div class="video-content">
            <span class="close-btn">×</span>
            <div id="video-container"></div>
        </div>
    </div>

    <!-- Toast notification -->
    <div class="toast" id="toast"></div>

    <script>
        // Number of cards per page (3x2 grid)
        const itemsPerPage = 6;
        // Current page for pagination
        let currentPage = 1;

        // Function to render process cards
        function renderGrid(data, page = 1) {
            // Calculate start and end indices for pagination
            const start = (page - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const paginatedData = data.slice(start, end);
            const grid = $('#process-grid');
            grid.empty();
            // Create a card for each process
            paginatedData.forEach(p => {
                const card = `
                    <div class="card" data-id="${p.id}">
                        <div class="card-header">${p.name}</div>
                        <div class="card-meta">
                            <div>Owner: ${p.owner}</div>
                            <div>Last Updated: ${p.last_updated}</div>
                        </div>
                        <div class="status-container">
                            <span class="status-text">${p.status.charAt(0).toUpperCase() + p.status.slice(1)}</span>
                            <div class="status-indicator ${p.status === 'active' ? 'status-active' : ''}"></div>
                        </div>
                        <a href="#" class="video-btn" data-link='${p.link}'>Click here</a>
                        <div class="card-actions">
                            <button class="edit-btn">✏️ Edit</button>
                            <button class="archive-btn">❌ Archive</button>
                        </div>
                    </div>`;
                grid.append(card);
            });
            // Render pagination controls
            renderPagination(data.length, page);
        }

        // Function to render pagination buttons
        function renderPagination(totalItems, currentPage) {
            // Calculate number of pages
            const pageCount = Math.ceil(totalItems / itemsPerPage);
            const pagination = $('#pagination');
            pagination.empty();
            // Create a button for each page
            for (let i = 1; i <= pageCount; i++) {
                const btn = `<button ${i === currentPage ? 'disabled' : ''}>${i}</button>`;
                pagination.append(btn);
            }
        }

        // Function to fetch processes from backend
        function fetchProcesses() {
            // Get filter values
            const owner = $('#owner-filter').val();
            const status = $('#status-filter').val();
            // Build query parameters
            const params = new URLSearchParams();
            if (owner) params.append('owner', owner);
            if (status) params.append('status', status);
            // Fetch data from /data endpoint
            $.get('/data?' + params.toString(), function(data) {
                renderGrid(data, currentPage);
            });
        }

        // Function to show toast notification
        function showToast(message) {
            const toast = $('#toast');
            toast.text(message);
            toast.fadeIn();
            // Hide after 1 second
            setTimeout(() => toast.fadeOut(), 1000);
        }

        // Document ready handler
        $(document).ready(function() {
            // Initial fetch of processes
            fetchProcesses();

            // Handle pagination button clicks
            $('#pagination').on('click', 'button', function() {
                currentPage = parseInt($(this).text());
                fetchProcesses();
            });

            // Handle filter changes
            $('#owner-filter, #status-filter').change(function() {
                currentPage = 1; // Reset to first page
                fetchProcesses();
            });

            // Open add process modal
            $('#add-process').click(function() {
                $('#modal-title').text('Add Process');
                $('#process-form')[0].reset();
                $('#process-id').val('');
                $('#status').val('active'); // Default to active
                $('#form-modal').fadeIn();
            });

            // Open edit process modal
            $('#process-grid').on('click', '.edit-btn', function() {
                const id = $(this).closest('.card').data('id');
                // Fetch all processes to find the one to edit
                $.get('/data', function(data) {
                    const process = data.find(p => p.id === id);
                    if (process) {
                        $('#modal-title').text('Edit Process');
                        $('#process-id').val(process.id);
                        $('#owner').val(process.owner);
                        $('#name').val(process.name);
                        $('#link').val(process.link);
                        $('#status').val(process.status);
                        // Show status for editing
                        $('#status').show();
                        $('#status').prev('label').show();
                        $('#form-modal').fadeIn();
                    }
                });
            });

            // Archive process
            $('#process-grid').on('click', '.archive-btn', function() {
                if (confirm('Are you sure you want to archive this process?')) {
                    const id = $(this).closest('.card').data('id');
                    // Send archive request to backend
                    $.post(`/archive/${id}`, function(response) {
                        showToast(response.message);
                        fetchProcesses();
                    });
                }
            });

            // Handle form submission
            $('#process-form').submit(function(e) {
                e.preventDefault();
                // Collect form data
                const data = {
                    id: $('#process-id').val(),
                    owner: $('#owner').val(),
                    name: $('#name').val(),
                    link: $('#link').val(),
                    status: $('#status').val()
                };
                // Send data to /submit endpoint
                $.ajax({
                    url: '/submit',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function(response) {
                        showToast(response.message);
                        $('#form-modal').fadeOut();
                        fetchProcesses();
                    }
                });
            });

            // Close modals
            $('#cancel-btn, .close-btn').click(function() {
                $('#form-modal').fadeOut();
                $('#video-modal').fadeOut();
            });

            // Open video popup
            $('#process-grid').on('click', '.video-btn', function(e) {
                e.preventDefault();
                const link = $(this).data('link');
                $('#video-container').html(link);
                $('#video-modal').fadeIn();
            });
        });
    </script>
</body>
</html>
'''

# Run the application
if __name__ == '__main__':
    # Initialize database before starting
    init_db()
    # Run Flask in debug mode
    app.run(debug=True)
